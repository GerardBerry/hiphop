(module js-hop-binding
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject))
   (import esterel-compiler))

(define js-worker #f)
(define js-exports #f)
(define js-require #f)
(define rjs #f)

(define reactive-machine #f)
(define emit #f)
(define loop #f)
(define abort #f)
(define parallel #f)
(define await #f)
(define halt #f)
(define sequence #f)
(define pause #f)
(define input-signal #f)
(define output-signal #f)

(define (hopscript %this this scope module)
   (set! js-worker (js-current-worker))
   (set! js-exports (js-get module 'exports %this))
   (set! js-require (nodejs-require js-worker %this module 'hopscript))
   (set! rjs (js-call1 %this js-require (js-undefined)
		(js-string->jsstring "./reactive-js.js")))

   (set! reactive-machine
      (make-hopjs-function (js-get rjs 'REACTIVEMACHINE %this) %this))
   (set! emit (make-hopjs-function (js-get rjs 'EMIT %this) %this))
   (set! loop (make-hopjs-function (js-get rjs 'LOOP %this) %this))

   (js-bind! %this js-exports 'compile_from_esterel
      :value (js-make-function %this compile-from-esterel 1
		'compile_from_esterel)
      :writable #f
      :enumerable #f))

(define (split %this l)
   (with-access::JsGlobalObject %this (js-object)
      (cond
	 ((null? l)
	  (values (js-new %this js-object) '()))
	 ((not (keyword? (car l)))
	  (values (js-new %this js-object) l))
	 (else
	  (let loop ((tail (cdr l))
		     (walk (cddr l)))
	     (cond
		((null? walk)
		 (values (js-plist->jsobject l %this) '()))
		((keyword? (car walk))
		 (loop (cdr walk) (cddr walk)))
		(else
		 (set-cdr! tail '())
		 (values (js-plist->jsobject l %this) walk))))))))

(define (make-hopjs-function fun %this)
   (lambda ( . l) ;; ( . l) or just l ? seems to be the same
      (multiple-value-bind (attrs nodes)
	 (split %this l)
	 (print (object-class fun))
	 (js-apply %this fun (js-undefined)
	    (cons attrs (js-plist->jsobject nodes %this))))))

(define (compile-from-esterel this)
   (build-ast (current-input-port))
   (print (reactive-machine :name "foo"))
   (print "Esterel code successfully parsed."))