(module esterel-compiler
   (export build-ast))

(define esterel-lalr-grammar
   (lalr-grammar

      (identifier input-kwd output-kwd inputoutput-kwd signal-kwd
       colon (left: semi-colon parallel-kwd or-kwd and-kwd plus mult
       slash minus div mod lt gt lteq gteq neq eq elsif-kwd
       handle-kwd) in-kwd comma present-kwd then-kwd else-kwd end
       nothing-kwd emit-kwd halt-kwd suspend-kwd sustain-kwd await-kwd
       abort-kwd left-par left-square-bracket right-square-bracket
       right-par pause-kwd exit-kwd loop-kwd module-kwd combine-kwd
       with-kwd assign-kwd function-kwd procedure-kwd case-kwd do-kwd
       repeat-kwd times-kwd weak-kwd positive-kwd each-kwd every-kwd
       return-kwd var-kwd type-kwd constant-kwd task-kwd run-kwd impl
       excl xcur pre-kwd double-xcur double-quote immediate-kwd string
       digit sensor-kwd relation-kwd not-kwd true-kwd false-kwd dot
       call-kwd if-kwd when-kwd trap-kwd exec-kwd)

      ;; Modules decarations
      (module-decl
	 ((module-kwd identifier colon interface-decl-list statement
	     end-module-decl))
	 ((module-kwd identifier colon statement end-module-decl)))
      (end-module-decl
	 ((end module-kwd))
	 ((end)))

      ;; Interface delcarations
      (interface-decl-list
	 ((interface-decl-list interface-decls))
	 ((interface-decls)))
      (interface-decls
	 ((type-decls))
	 ((constant-decls))
	 ((function-decls))
	 ((procedure-decls))
	 ((task-decls))
	 ((interface-signal-decls))
	 ((sensor-decls))
	 ((relation-decls)))

      ;; Type declarations
      (type-decls
	 ((type-kwd type-decl-list semi-colon)))
      (type-decl-list
	 ((type-decl))
	 ((type-decl-list comma type-decl)))
      (type-decl
	 ((identifier)))

      ;; Constant declarations
      (constant-decls
	 ((constant-kwd constant-decl-list semi-colon)))
      (constant-decl-list
	 ((constant-decl))
	 ((constant-decl-list comma constant-decl)))
      (constant-decl
	 ((identifier colon identifier))
	 ((identifier eq constant-atom colon identifier)))

      ;; Functions declarations
      (function-decls
	 ((function-kwd function-decl-list semi-colon)))
      (function-decl-list
	 ((function-decl))
	 ((function-decl-list comma function-decl)))
      (function-decl
	 ((identifier left-par identifier-list right-par colon identifier)))
      (identifier-list
	 (())
	 ((identifier))
	 ((identifier-list comma identifier)))

      ;; Procedure declarations
      (procedure-decls
	 ((procedure-kwd procedure-decl-list)))
      (procedure-decl-list
	 ((procedure-decl))
	 ((procedure-decl-list comma procedure-decl)))
      (procedure-decl
	 ((identifier left-par identifier-list right-par
	     left-par identifier-list right-par)))

      ;; Task declarations
      (task-decls
	 ((task-kwd task-decl-list semi-colon)))
      (task-decl-list
	 ((task-decl))
	 ((task-decl-list comma task-decl)))
      (task-decl
	 ((identifier left-par identifier-list right-par
	     left-par identifier-list right-par)))

      ;; Signal declarations
      (interface-signal-decls
	 ((input-kwd signal-decl-list semi-colon))
	 ((output-kwd signal-decl-list semi-colon))
	 ((inputoutput-kwd signal-decl-list semi-colon)))
      (signal-decl-list
	 ((signal-decl))
	 ((signal-decl-list comma signal-decl)))
      (signal-decl
	 ((identifier))
	 ((identifier colon channel-type))
	 ((identifier assign-kwd expression colon channel-type)))
      (channel-type
	 ((identifier))
	 ((combine-kwd identifier with-kwd identifier))
	 ((combine-kwd identifier with-kwd predefined-combine-function)))
      (predefined-combine-function
	 ((plus))
	 ((mult))
	 ((or-kwd))
	 ((and-kwd)))

      ;; Sensor declarations
      (sensor-decls
	 ((sensor-kwd sensor-decl-list semi-colon)))
      (sensor-decl-list
	 ((sensor-decl))
	 ((sensor-decl-list comma sensor-decl)))
      (sensor-decl
	 ((identifier colon identifier)))

      ;; Input relation declarations
      (relation-decls
	 ((relation-kwd relation-decl-list semi-colon)))
      (relation-decl-list
	 ((relation-decl))
	 ((relation-decl-list comma relation-decl)))
      (relation-decl
	 ((implication-decl))
	 ((exclusion-decl)))
      (implication-decl
	 ((identifier impl identifier)))
      (exclusion-decl
	 ((identifier excl identifier))
	 ((exclusion-decl excl identifier)))

      ;; Expressions
      (expression
	 ((constant))
	 ((left-par expression right-par))
	 ((xcur identifier))
	 ((pre-kwd left-par xcur identifier right-par))
	 ((double-xcur identifier))
	 ((minus expression))
	 ((expression mult expression))
	 ((expression div expression))
	 ((expression plus expression))
	 ((expression minus expression))
	 ((expression mod expression))
	 ((expression eq expression))
	 ((expression neq expression))
	 ((expression lt expression))
	 ((expression gt expression))
	 ((expression lteq expression))
	 ((expression gteq expression))
	 ((not-kwd expression))
	 ((expression and-kwd expression))
	 ((expression or-kwd expression))
	 ((function-call)))
      (constant
	 ((constant-literal))
	 ((unsigned-number)))
      (constant-literal
	 ((identifier))
	 ((true-kwd))
	 ((false-kwd))
	 ((string)))
      (constant-atom
	 ((constant-literal))
	 ((signed-number)))
      (signed-number
	 ((unsigned-number))
	 ((minus unsigned-number)))
      (unsigned-number
	 ;; to compile to JS, we don't need to make difference between double
	 ;; and float, so we keep only unsigned-float rule
	 ((unsigned-integer))
	 ((unsigned-float)))
      (unsigned-integer
	 ((digit)))
      (unsigned-float
	 ((digit dot digit)))
      (function-call
	 ((identifier left-par expression-list right-par)))
      (expression-list
	 (())
	 ((expression))
	 ((expression-list comma expression)))

      ;; Signal expressions
      (signal-expression
	 ((identifier))
	 ((pre-kwd left-par identifier right-par))
	 ((not-kwd signal-expression))
	 ((signal-expression and-kwd signal-expression))
	 ((signal-expression or-kwd signal-expression))
	 ((left-par signal-expression right-par)))

      ;; Delay expressions
      (delay-expression
	 ((bracketed-signal-expression))
	 ((immediate-kwd bracketed-signal-expression))
	 ((expression bracketed-signal-expression)))
      (bracketed-signal-expression
	 ((identifier))
	 ((left-square-bracket signal-expression right-square-bracket)))

      ;; Statements declarations
      (statement
	 ((parallel))
	 ((non-parallel)))
      (parallel
	 ((non-parallel parallel-kwd non-parallel))
	 ((parallel parallel-kwd non-parallel)))
      (non-parallel
	 ((atomic-statement))
	 ((sequence)))
      (sequence
	 ((sequence-without-terminator))
	 ((sequence-without-terminator semi-colon)))
      (sequence-without-terminator
	 ((atomic-statement semi-colon atomic-statement))
	 ((sequence-without-terminator semi-colon atomic-statement)))

      ;; Atomic statements
      (atomic-statement
	 ((nothing-kwd))
	 ((pause-kwd))
	 ((halt-kwd))
	 ((emit))
	 ((sustain))
	 ((assignment))
	 ((procedure-call))
	 ((present))
	 ((if-data-test))
	 ((loop))
	 ((repeat))
	 ((abort))
	 ((await))
	 ((loop-each))
	 ((every))
	 ((suspend))
	 ((trap))
	 ((exit))
	 ((exec))
	 ((local-variable-decl))
	 ((local-signal-decl))
	 ((run-module))
	 ((left-square-bracket statement right-square-bracket)))

      ;; Signal emission
      (emit
	 ((emit-kwd identifier))
	 ((emit-kwd identifier left-par expression right-par)))
      (sustain
	 ((sustain-kwd identifier))
	 ((sustain-kwd identifier left-par expression right-par)))

      ;; Assignment anf procedure call
      (assignment
	 ((identifier assign-kwd expression)))
      (procedure-call
	 ((call-kwd identifier left-par identifier-list right-par
	     left-par expression-list right-par)))

      ;; Present signal test
      (present
	 ((present-then-else))
	 ((present-case-else)))
      (end-present
	 ((end))
	 ((end present-kwd)))
      (present-then-else
	 ((present-kwd present-event then-part else-part end-present)))
      (present-event
	 ((signal-expression))
	 ((left-square-bracket signal-expression right-square-bracket)))
      (then-part
	 (())
	 ((then-kwd statement)))
      (else-part
	 (())
	 ((else-kwd statement)))
      (present-case-else
	 ((present-kwd present-case-list else-part end-present)))
      (present-case-list
	 ((present-case))
	 ((present-case-list present-case)))
      (present-case
	 ((case-kwd present-event))
	 ((case-kwd present-event do-kwd statement)))

      ;; If data test
      (if-data-test
	 ((if-kwd expression then-part elsif-part-list else-part end-if)))
      (end-if
	 ((end))
	 ((end if-kwd)))
      (elsif-part-list
	 (())
	 ((elsif))
	 ((elsif-part-list elsif)))
      (elsif
	 ((elsif-kwd expression then-part)))

      ;; Looping
      (loop
	 ((loop-kwd statement end-loop)))
      (end-loop
	 ((end))
	 ((end loop-kwd)))

      ;; Repeat loops
      (repeat
	 ((positive-repeat expression times-kwd statement end-repeat)))
      (end-repeat
	 ((end))
	 ((end repeat-kwd)))
      (positive-repeat
	 ((repeat-kwd))
	 ((positive-kwd repeat-kwd)))

      ;; Abort statements
      (abort
	 ((weak-abort statement when-kwd delay-expression))
	 ((weak-abort statement when-kwd delay-expression
	     do-kwd statement end-abort))
	 ((weak-abort statement when-kwd abort-case-list end-abort)))
      (weak-abort
	 ((abort-kwd))
	 ((weak-kwd abort-kwd)))
      (end-abort
	 ((end))
	 ((end weak-abort)))
      (abort-case-list
	 ((abort-case))
	 ((abort-case-list abort-case)))
      (abort-case
	 ((case-kwd delay-expression do-kwd statement))
	 ((case-kwd delay-expression)))

      ;; Await statement
      (await
	 ((await-kwd delay-expression))
	 ((await-kwd delay-expression do-kwd statement end-await))
	 ((await-kwd await-case-list end-await)))
      (await-case-list
	 ((await-case))
	 ((await-case-list await-case)))
      (await-case
	 ((case-kwd delay-expression do-kwd statement))
	 ((case-kwd delay-expression)))
      (end-await
	 ((end))
	 ((end await-kwd)))

      ;; Temporal loop
      (loop-each
	 ((loop-kwd statement each-kwd delay-expression)))
      (every
	 ((every-kwd delay-expression do-kwd statement end-every)))
      (end-every
	 ((end))
	 ((end every-kwd)))

      ;; Suspend statement
      (suspend
	 ((suspend-kwd statement when-kwd delay-expression)))

      ;; Traps
      (trap
	 ((trap-kwd exception-decl-list in-kwd statement
	    exception-handler-list end-trap)))
      (end-trap
	 ((end))
	 ((end trap-kwd)))
      (exception-decl-list
	 ((exception-decl))
	 ((exception-decl-list comma exception-decl)))
      (exception-decl
	 ((identifier))
	 ((identifier channel-type))
	 ((identifier colon channel-type))
	 ((identifier assign-kwd expression colon channel-type)))
      (exit
	 ((exit-kwd identifier))
	 ((exit-kwd identifier left-par expression right-par)))
      (exception-handler-list
	 (())
	 ((exception-handler))
	 ((exception-handler-list exception-handler)))
      (exception-handler
	 ((handle-kwd exception-event do-kwd statement)))
      (exception-event
	 ((identifier))
	 ((left-par exception-event right-par))
	 ((not-kwd exception-event))
	 ((exception-event and-kwd exception-event))
	 ((exception-event or-kwd exception-event)))

      ;; Exec task execution statement
      (exec
	 ((exec-task))
	 ((exec-task do-kwd statement end-exec))
	 ((exec-kwd exec-case-list end-exec)))
      (exec-task
	 ((exec-kwd identifier left-par identifier-list right-par
	     left-par expression-list right-par return-kwd identifier)))
      (end-exec
	 ((end))
	 ((end exec-kwd)))
      (exec-case-list
	 ((exec-case))
	 ((exec-case-list exec-case)))
      (exec-case
	 ((case-task))
	 ((case-task do-kwd statement)))
      (case-task
	 ((case-kwd identifier left-par identifier-list right-par
	     left-par expression-list right-par return-kwd identifier)))

      ;; Local signal declaration
      (local-signal-decl
	 ((signal-kwd signal-decl-list in-kwd statement end-signal)))
      (end-signal
	 ((end))
	 ((end signal-kwd)))

      ;; Local variable declaration
      (local-variable-decl
	 ((var-kwd variable-decl-list in-kwd statement end-var)))
      (end-var
	 ((end))
	 ((end var-kwd)))
      (variable-decl-list
	 ((variable-decl))
	 ((variable-decl-list comma variable-decl)))
      (variable-decl
	 ((identifier colon identifier))
	 ((identifier assign-kwd expression colon identifier)))

      ;; Run module instantiation statement
      (run-module
	 ((run-kwd run-module-names))
	 ((run-kwd run-module-names
	     left-square-bracket renaming-list right-square-bracket)))
      (run-module-names
	 ((identifier))
	 ((identifier slash identifier)))
      (renaming-list
	 ((renaming))
	 ((renaming-list semi-colon renaming)))
      (renaming
	 ((type-kwd type-renaming-list))
	 ((constant-kwd constant-renaming-list))
	 ((function-kwd function-renaming-list))
	 ((procedure-kwd procedure-renaming-list))
	 ((task-kwd task-renaming-list))
	 ((signal-kwd signal-renaming-list)))
      (type-renaming-list
	 ((type-renaming))
	 ((type-renaming-list comma type-renaming)))
      (type-renaming
	 ((identifier slash identifier)))
      (constant-renaming-list
	 ((constant-renaming))
	 ((constant-renaming-list comma constant-renaming)))
      (constant-renaming
	 ((constant-atom slash identifier)))
      (function-renaming-list
	 ((function-renaming))
	 ((function-renaming-list comma function-renaming)))
      (function-renaming
	 ((identifier slash identifier))
	 ((predefined-function slash identifier)))
      (predefined-function
	 ((and-kwd))
	 ((or-kwd))
	 ((not-kwd))
	 ((plus))
	 ((minus))
	 ((div))
	 ((mod))
	 ((lt))
	 ((gt))
	 ((lteq))
	 ((gteq))
	 ((neq))
	 ((eq)))
      (procedure-renaming-list
	 ((procedure-renaming))
	 ((procedure-renaming-list comma procedure-renaming)))
      (procedure-renaming
	 ((identifier slash identifier)))
      (task-renaming-list
	 ((task-renaming))
	 ((task-renaming-list comma task-renaming)))
      (task-renaming
	 ((identifier slash identifier)))
      (signal-renaming-list
	 ((signal-renaming))
	 ((signal-renaming-list comma signal-renaming)))
      (signal-renaming
	 ((identifier slash identifier)))))

(define esterel-regular-grammar
   (regular-grammar ()
      ((+ (or #\tab #\space #\newline)) (ignore))
      ((uncase "function") 'function-kwd)
      ((uncase "procedure") 'procedure-kwd)
      ((uncase "module") 'module-kwd)
      ((uncase "signal") 'signal-kwd)
      ((uncase "input") 'input-kwd)
      ((uncase "output") 'output-kwd)
      ((uncase "inputoutput") 'inputoutput-kwd)
      ((uncase "nothing") 'nothing-kwd)
      ((uncase "halt") 'halt-kwd)
      ((uncase "emit") 'emit-kwd)
      ((uncase "present") 'present-kwd)
      ((uncase "then") 'then-kwd)
      ((uncase "else") 'else-kwd)
      ((uncase "loop") 'loop-kwd)
      ((uncase "trap") 'trap-kwd)
      ((uncase "in") 'in-kwd)
      ((uncase "exit") 'exit-kwd)
      ((uncase "when") 'when-kwd)
      ((uncase "each") 'each-kwd)
      ((uncase "sustain") 'sustain-kwd)
      ((uncase "end") 'end)
      ((uncase "pause") 'pause-kwd)
      ((uncase "await") 'await-kwd)
      ((uncase "abort") 'abort-kwd)
      ((uncase "suspend") 'suspend-kwd)
      ((uncase "combine") 'combine-kwd)
      ((uncase "with") 'with-kwd)
      ((uncase "do") 'do-kwd)
      ((uncase "case") 'case-kwd)
      ((uncase "if") 'if-kwd)
      ((uncase "elsif") 'elsif-kwd)
      ((uncase "repeat") 'repeat-kwd)
      ((uncase "times") 'times-kwd)
      ((uncase "weak") 'weak-kwd)
      ((uncase "positive") 'positive-kwd)
      ((uncase "each") 'each-kwd)
      ((uncase "every") 'every-kwd)
      ((uncase "handle") 'handle-kwd)
      ((uncase "return") 'return-kwd)
      ((uncase "var") 'var-kwd)
      ((uncase "type") 'type-kwd)
      ((uncase "constant") 'constant-kwd)
      ((uncase "task") 'task-kwd)
      ((uncase "run") 'run-kwd)
      ((uncase "immediate") 'immediate-kwd)
      ((uncase "sensor") 'sensor-kwd)
      ((uncase "relation") 'relation-kwd)
      ((uncase "call") 'call-kwd)
      ("||" 'parallel-kwd)
      (#\; 'semi-colon)
      (":=" 'assign-kwd)
      (#\: 'colon)
      (#\, 'comma)
      (#\[ 'left-square-bracket)
      (#\] 'right-square-bracket)
      (#\( 'left-par)
      (#\) 'right-par)
      (#\+ 'plus)
      (#\- 'minus)
      (#\/ 'div)
      ((uncase "mod") 'mod)
      (#\< 'lt)
      (#\> 'gt)
      ("<=" 'lteq)
      (">=" 'gteq)
      ("<>" 'neq)
      (#\= 'eq)
      (#\* 'mult)
      (#\/ 'slash)
      ("=>" 'impl)
      (#\# 'excl)
      (#\? 'xcur)
      ("??" 'double-xcur)
      (#\" 'double-quote)
      ((uncase "pre") 'pre-kwd)
      ((uncase "or") 'or-kwd)
      ((uncase "and") 'and-kwd)
      ((uncase "not") 'not-kwd)
      ((uncase "true") 'true-kwd)
      ((uncase "false") 'false-kwd)
      ((: #\"  (* all) #\") 'string)
      (#\. 'dot)
      ((+ digit) (cons 'digit (string->integer (the-string))))
      ((+ alnum) (cons 'identifier (the-string)))))
      ; (else
      ;  (let ((c the-failure))
      ; 	  (if (eof-object? c)
      ; 	      c
      ; 	      (error 'rgc "Illegal character " c))))))

(define (build-ast input)
   (read/lalrp
      esterel-lalr-grammar
      esterel-regular-grammar
      input))