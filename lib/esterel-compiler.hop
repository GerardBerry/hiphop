(module esterel-compiler
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

(define global-obj #f)
(define exports-obj #f)

(define esterel-lalr-grammar
   (lalr-grammar

      (identifier input output signal colon (left: semi-colon parallel
      logical-or logical-and plus mult) in comma present then else end
      nothing emit halt suspend sustain await abort left-par
      left-square-bracket right-square-bracket right-par pause exit
      loop module conbine with init)

      ;; Modules decarations
      (module-decl
	 ((module-kwd identifier colon interface-decl-list statement
	     end-module-decl))
	 ((module-kwd identifier colon statement end-module-decl)))
      (end-module-decl
	 ((end-kwd module-kwd))
	 ((end-kwd)))

      ;; Interface delcarations
      (interface-decl-list
	 ((inteface-decl-list interface-decls))
	 ((interface-decls)))
      (interface-decls
	 ((type-decls))
	 ((constant-decls))
	 ((functions-decls))
	 ((procedure-decls))
	 ((task-decls))
	 ((interface-signal-decls))
	 ((sensor-decls))
	 ((relation-decls))
	 ((output-decls)))

      ;; Statements declarations
      (statement
	 ((parallel))
	 ((non-parallel)))
      (parallel
	 ((non-parallel parallel-kwd non-parallel))
	 ((parallel parallel-kwd non-parallel)))
      (non-parallel
	 ((atomic-statement))
	 ((sequence)))
      (sequence
	 ((sequence-without-terminator))
	 ((sequence-without-terminator semi-colon)))
      (sequence-without-terminator
	 ((atomic-statement semi-colon atomic-statement))
	 ((sequence-without-terminator semi-colon atomic-statement)))

      ;; Atomic statements declarations
      (atomic-statement
	 ((nothing-kwd))
	 ((pause-kwd))
	 ((halt-kwd))
	 ((emit))
	 ((sustain))
	 ((assignment))
	 ((procedure-call))
	 ((present))
	 ((if))
	 ((loop))
	 ((repeat))
	 ((abort))
	 ((await))
	 ((loop-each))
	 ((every))
	 ((suspend))
	 ((trap))
	 ((exit))
	 ((exec))
	 ((local-variable-decl))
	 ((local-signal-decl))
	 ((run-module))
	 ((left-square-bracket statement right-square-bracket)))

      ;; Signal declarations
      (interface-signal-decls
	 ((input-kwd signal-decl-list semi-colon))
	 ((output-kwd signal-decl-list semi-colon))
	 ((inputoutput-kwd signal-decl-list semi-colon)))
      (signal-decl-list
	 ((signal-decl))
	 ((signal-decl-list comma signal-decl)))
      (signal-decl
	 ((identifier))
	 ((indentifier colon channel-type))
	 ((indentifier init-kwd expression colon channel-type)))
      (channel-type
	 ((identifier))
	 ((combine-kwd identifier with-kwd indentifier))
	 ((combine-kwd identifier with-kwd predefined-combine-function)))
      (predefined-combine-function
	 ((plus))
	 ((mult))
	 ((logical-or))
	 ((logical-and)))


      ;; vieux trucs Ã  virer
      (local-signal-decl
	 ((signal signal-decl-list in instruction end-local-signal)))
      (end-local-signal
	 ((end))
	 ((end signal)))
      (present-stmt
	 ((present identifier optional-then optional-else end-present)))
      (optional-then
	 ((then instruction))
	 (()))
      (optional-else
	 ((else instruction))
	 (()))
      (end-present
	 ((end present))
	 ((end)))
      (nothing-stmt
	 ((nothing)))
      (halt-stmt
	 ((halt)))
      (emit-stmt
;	 ((emit identifier left-par expression right-par))
	 ((emit identifier)))
      (await-stmt
	 ((await identifier))
	 ((pause)))
      (exit-stmt
	 ((exit identifier)))
      (loop-stmt
	 ((loop instruction end-loop)))
      (end-loop
	 ((end loop))
	 ((end)))
      (atomic-instruction
	 ((subinstruction))
	 ((nothing-stmt))
	 ((halt-stmt))
	 ((emit-stmt))
	 ((present-stmt))
	 ((loop-stmt))
	 ((local-signal-decl))
	 ((await-stmt))
	 ((exit-stmt)))
      (subinstruction
	 ((left-square-bracket instruction right-square-bracket)))
      (instruction
	 ((parallel-instruction))
	 ((no-parallel-instruction)))
      (no-parallel-instruction
	 ((sequence-instruction))
	 ((atomic-instruction)))
      (parallel-instruction
	 ((no-parallel-instruction parallel no-parallel-instruction))
	 ((no-parallel-instruction parallel parallel-branch-list)))
      (parallel-branch-list
	 ((no-parallel-instruction parallel no-parallel-instruction))
	 ((parallel-branch-list parallel no-parallel-instruction)))
      (sequence-instruction
	 ((sequence-instruction-list)))
      (sequence-instruction-list
	 ((pure-sequence-instruction-list))
	 ((atomic-instruction semi-colon))
	 ((pure-sequence-instruction-list semi-colon)))
      (pure-sequence-instruction-list
	 ((atomic-instruction semi-colon atomic-instruction))
	 ((pure-sequence-instruction-list semi-colon atomic-instruction)))))

(define esterel-regular-grammar
   (regular-grammar ()
      ((+ (or #\tab #\space #\newline)) (ignore))
      ((uncase "module") 'module-kwd)
      ((uncase "signal") 'signal-kwd)
      ((uncase "input") 'input-kwd)
      ((uncase "output") 'output-kwd)
      ((uncase "inputoutput") 'inputoutput-kwd)
      ((uncase "nothing") 'nothing-kwd)
      ((uncase "halt") 'halt-kwd)
      ((uncase "emit") 'emit-kwd)
      ((uncase "present") 'present-kwd)
      ((uncase "then") 'then-kwd)
      ((uncase "else") 'else-kwd)
      ((uncase "loop") 'loop-kwd)
      ((uncase "trap") 'trap-kwd)
      ((uncase "in") 'in-kwd)
      ((uncase "exit") 'exit-kwd)
      ((uncase "when") 'when-kwd)
      ((uncase "each") 'each-kwd)
      ((uncase "sustain") 'sustain-kwd)
      ((uncase "end") 'end-kwd)
      ((uncase "pause") 'pause-kwd)
      ((uncase "await") 'await-kwd)
      ((uncase "abort") 'abort-kwd)
      ((uncase "suspend") 'suspend-kwd)
      ((uncase "combine") 'combine-kwd)
      ((uncase "with") 'with-kwd)
      ("||" 'parallel-kwd)
      (";" 'semi-colon)
      (":=" 'init-kwd)
      (":" 'colon)
      ("," 'comma)
      ("[" 'left-square-bracket)
      ("]" 'right-square-bracket)
      ("(" 'left-par)
      (")" 'right-par)
      ("+" 'plus)
      ("*" 'mult)
      ("or" 'logical-or)
      ("and" 'logical-and)
      ((+ alnum) (cons 'identifier (the-string)))
      (else
       (let ((c the-failure))
	  (if (eof-object? c)
	      c
	      (error 'rgc "Illegal character " c))))))


(define (build-ast input)
   (read/lalrp
      esterel-lalr-grammar
      esterel-regular-grammar
      input))

(define (hopscript %this this scope module)
   (set! global-obj %this)
   (let ((exports (js-get module 'exports %this)))
      (set! exports-obj exports)
      (js-bind! %this exports 'build_ast
         :value (js-make-function %this
                   (lambda (o)
                      (build-ast))
                   1 'build_ast)
         :writable #f
         :enumerable #f)))

(build-ast (current-input-port))
