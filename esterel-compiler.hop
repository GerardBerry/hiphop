(module esterel-compiler
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

(define global-obj #f)
(define exports-obj #f)

(define esterel-lalr-grammar
   (lalr-grammar
      (newline emit identifier)
      (lines
	 (())
	 ((lines newline))
	 ((lines expression newline) (display expression)))
      (expression
	 ((emit identifier) (string-append "emit " identifier)))))

(define esterel-regular-grammar
   (regular-grammar ()
      ((+ (or #\tab #\space)) (ignore))
      (#\newline 'newline)
      ((uncase "module") 'module)
      ((uncase "signal") 'signal)
      ((uncase "input") 'input)
      ((uncase "output") 'output )
      ((uncase "nothing") 'nothing)
      ((uncase "halt") 'halt)
      ((uncase "emit") 'emit)
      ((uncase "present") 'present)
      ((uncase "then") 'then)
      ((uncase "else") 'else)
      ((uncase "loop") 'loop)
      ((uncase "trap") 'trap)
      ((uncase "in") 'in)
      ((uncase "exit") 'exit)
      ((uncase "when") 'when)
      ((uncase "each") 'each)
      ((uncase "sustain") 'sustain)
      ((uncase "end") 'end)
      ((uncase "pause") 'pause)
      ((uncase "await") 'await)
      ((uncase "abort") 'abort)
      ((uncase "suspend") 'suspend)
      ("||" 'parallel)
      (";" 'semi-colon)
      (":" 'colon)
      ("[" 'left-square-bracket)
      ("]" 'right-square-bracket)
      ((+ alnum) (cons 'identifier (the-string)))))

(define (build-ast input)
   (begin
      (read/lalrp esterel-lalr-grammar esterel-regular-grammar input)
      (reset-eof input)))

(define (hopscript %this this scope module)
   (set! global-obj %this)
   (let ((exports (js-get module 'exports %this)))
      (set! exports-obj exports)
      (js-bind! %this exports 'build_ast
         :value (js-make-function %this
                   (lambda (o)
                      (build-ast))
                   1 'build_ast)
         :writable #f
         :enumerable #f)))

(build-ast (current-input-port))