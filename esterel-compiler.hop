(module esterel-compiler
   (export (hopscript ::JsGlobalObject ::JsObject ::JsObject ::JsObject)))

(define global-obj #f)
(define exports-obj #f)

(define esterel-lalr-grammar
   (lalr-grammar
      (identifier input output signal colon semi-colon comma present
	 then else end in nothing emit halt suspend sustain await abort left-par
	 right-par left-square-bracket right-square-bracket pause exit loop
	 parallel module)
      (module-decl
	 ((module identifier colon decl-list instruction end-module-decl)))
      (end-module-decl
	 ((end module))
	 ((end)))
      (decl-list
	 (())
	 ((input-decls))
	 ((output-decls)))
      (signal-decl-list
	 ((identifier))
	 ((signal-decl-list)))
      (input-decls
	 ((input signal-decl-list)))
      (output-decls
	 ((output signal-decl-list)))
      (local-signal-decl
	 ((signal signal-decl-list in instruction end-local-signal)))
      (end-local-signal
	 ((end))
	 ((end signal)))
      (present-stmt
	 ((present identifier optional-then optional-else end-present)))
      (optional-then
	 ((then instruction))
	 (()))
      (optional-else
	 ((else instruction))
	 (()))
      (end-present
	 ((end present))
	 ((end)))
      (nothing-stmt
	 ((nothing)))
      (halt-stmt
	 ((halt)))
      (emit-stmt
;	 ((emit identifier left-par expression right-par))
	 ((emit identifier)))
      (await-stmt
	 ((await identifier))
	 ((pause)))
      (exit-stmt
	 ((exit identifier)))
      (loop-stmt
	 ((loop instruction end-loop)))
      (end-loop
	 ((end loop))
	 ((end)))
      (atomic-instruction
	 ((subinstruction))
	 ((nothing-stmt))
	 ((halt-stmt))
	 ((emit-stmt))
	 ((present-stmt))
	 ((loop-stmt))
	 ((local-signal-decl))
	 ((await-stmt))
	 ((exit-stmt)))
      (subinstruction
	 ((left-square-bracket instruction right-square-bracket)))
      (instruction
	 ((parallel-instruction))
	 ((no-parallel-instruction)))
      (no-parallel-instruction
	 ((sequence-instruction))
	 ((atomic-instruction)))
      (parallel-instruction
	 ((no-parallel-instruction parallel no-parallel-instruction))
	 ((no-parallel-instruction parallel parallel-branch-list)))
      (parallel-branch-list
	 ((no-parallel-instruction parallel no-parallel-instruction))
	 ((parallel-branch-list parallel no-parallel-instruction)))
      (sequence-instruction
	 ((sequence-instruction-list)))
      (sequence-instruction-list
	 ((pure-sequence-instruction-list))
	 ((atomic-instruction semi-colon))
	 ((pure-sequence-instruction-list semi-colon)))
      (pure-sequence-instruction-list
	 ((atomic-instruction semi-colon atomic-instruction))
	 ((pure-sequence-instruction-list semi-colon atomic-instruction)))))

(define esterel-regular-grammar
   (regular-grammar ()
      ((+ (or #\tab #\space #\newline)) (ignore))
      ((uncase "module") 'module)
      ((uncase "signal") 'signal)
      ((uncase "input") 'input)
      ((uncase "output") 'output)
      ((uncase "nothing") 'nothing)
      ((uncase "halt") 'halt)
      ((uncase "emit") 'emit)
      ((uncase "present") 'present)
      ((uncase "then") 'then)
      ((uncase "else") 'else)
      ((uncase "loop") 'loop)
      ((uncase "trap") 'trap)
      ((uncase "in") 'in)
      ((uncase "exit") 'exit)
      ((uncase "when") 'when)
      ((uncase "each") 'each)
      ((uncase "sustain") 'sustain)
      ((uncase "end") 'end)
      ((uncase "pause") 'pause)
      ((uncase "await") 'await)
      ((uncase "abort") 'abort)
      ((uncase "suspend") 'suspend)
      ("||" 'parallel)
      (";" 'semi-colon)
      (":" 'colon)
      ("," 'comma)
      ("[" 'left-square-bracket)
      ("]" 'right-square-bracket)
      ("(" 'left-par)
      (")" 'right-par)
      ((+ alnum) (cons 'identifier (the-string)))
      (else
       (let ((c the-failure))
	  (if (eof-object? c)
	      c
	      (error 'rgc "Illegal character " c))))))


(define (build-ast input)
   (read/lalrp
      esterel-lalr-grammar
      esterel-regular-grammar
      input))

(define (hopscript %this this scope module)
   (set! global-obj %this)
   (let ((exports (js-get module 'exports %this)))
      (set! exports-obj exports)
      (js-bind! %this exports 'build_ast
         :value (js-make-function %this
                   (lambda (o)
                      (build-ast))
                   1 'build_ast)
         :writable #f
         :enumerable #f)))

(build-ast (current-input-port))
