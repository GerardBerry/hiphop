<Expression> --> ... | <HHExprStmt>

<HHExprStatement> --> hiphop <HHStatement>

<HHStatement> --> <HHHop>
  | <HHModule>
  | <HHBlock>
  | <HHHalt>
  | <HHFork>
  | <HHEmit>
  | <HHSustain>
  | <HHAbort>
  | <HHWeakabort>
  | <HHSuspend>
  | <HHLoop>
  | <HHAsync>
  | <HHRun>
  | <HHEvery>
  | <HHDo>
  | <HHIf>
  | <HHBreak>
  | <HHYield>
  | <HHAwait>
  | <HHExpression> ; 

<HHHop> --> hop { <Statement> }

<HHBlock> --> {}
  | <HHStatement>
  | <HHStatement> ... <HHStatement>

<HHModule> --> module [ <Identifier> ] ( <FormaSignalList> )

<FormaSignalList> --> | <Signal> ... <Signal>

<Signal> --> <Direction> <Identifier> <Combine>
  | <Direction> <Identifier> = <HHExpression> <Combine>

<Direction> --> | in | out | inout

<Combine> --> | combine <Expression>

<HHExpression> --> <Expression>
  | now( <Identifier> )
  | pre( <Identifier> )
  | val( <Identifier> )
  | preval( <Identifier> )

<HHDelay> --> <HHExpression>
  | count( <HHExpression>, <HHExpression> )
  | immediate <HHExpression>

<HHalt> --> halt

<HHFork> --> fork <HHBlock> [ par <HHBlock> ... par <HHBlock> ]
  
