;*=====================================================================*/
;*    serrano/prgm/project/hiphop/examples/prims/prims.hop             */
;*    -------------------------------------------------------------    */
;*    Author      :  Manuel Serrano                                    */
;*    Creation    :  Tue Oct 16 08:45:43 2012                          */
;*    Last change :  Wed Mar 12 09:41:56 2014 (serrano)                */
;*    Copyright   :  2012-14 Manuel Serrano                            */
;*    -------------------------------------------------------------    */
;*    Prims number aka the Darwin Sieve                                */
;*    -------------------------------------------------------------    */
;*    run with:                                                        */
;*      http://localhost:8080/hop/prims?width=300&height=300           */
;*=====================================================================*/

;*---------------------------------------------------------------------*/
;*    The module                                                       */
;*---------------------------------------------------------------------*/
(module prims
   ~(library hiphop)
   ~(import prims_client))

;*---------------------------------------------------------------------*/
;*    Source directory                                                 */
;*---------------------------------------------------------------------*/
(define _dir (the-loading-dir))

;*---------------------------------------------------------------------*/
;*    prims ...                                                        */
;*---------------------------------------------------------------------*/
(define-service (prims #!key count width height font speed prey-color predator-color (font-size "10"))
   (let* ((width (if (string? width) (string->integer width) 400))
	  (height (if (string? height) (string->integer height) 400))
	  (canvas (<CANVAS> :id "canvas" :width width :height height))
	  (count (if (string? count) (string->integer count) 1))
	  (speed (if (string? speed) (string->integer speed) 40)))
      (<HTML>
	 
	 (<HEAD>
	    :library "hiphop.js"
	    :include "hop-canvas" "hop-slider"
	    :path _dir
	    :include "prims"
	    
	    ~(define >add
		(instantiate::HipHopEventValued
		   (name "add")
		   (init '())))
	    
	    ~(define count>
		(instantiate::CounterEvent
		   (name "count")
		   (init 0)))
	    
	    ~(define G
		(instantiate::Graphic
		   (speed $speed)
		   (font-size $(string->integer font-size))
		   (font $(if (string? font) font "sans"))
		   (predator-color $(or predator-color "#00a"))
		   (prey-color $(or prey-color "#f00"))))
	    
	    ~(define mach&
		(instantiate::PrimMachine
		   (count 2)
		   (program (prims& >add G))))
	    
	    ~(add-event-listener! mach& count>
		(lambda (e::CounterEvent)
		   (innerHTML-set! "multiple" e.value)))
	    
	    ~(add-event-listener! window "load"
		(lambda ()
		   (with-access::Graphic G (canvas ctx)
		      (set! canvas $canvas)
		      (set! ctx (canvas.getContext "2d")))
		   (prims-resume G mach&))))
	 
	 (<BODY>
	    canvas
	    (<DIV> :style (format "width: ~apx" width)
	       (<DIV>
		  (<BUTTON> :onclick ~(prims-pause G mach&) "Pause")
		  "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;"
		  (map (lambda (n)
			  (<BUTTON> (format "Add ~s" n)
			     :onclick ~(prims-add-number! mach& >add $n)))
		     (list 1 5 10 25 100)))
	       (<DIV> 
		  (<SLIDER> :min 1 :max 100 :value speed
		     :onchange ~(with-access::Graphic G (speed)
				   (set! speed this.value)))))))))
