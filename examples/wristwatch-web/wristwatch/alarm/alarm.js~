//==================
// HipHop ALARM code
//==================

var B = require("../basic/basic.js");
var TD = require("../data/time-data.js");
var BD = require("../data/beep-data.js");
var AD = require("./alarm-data.js");
var WD = require("../watch/watch-data.js");

var rjs = require("hiphop");
exports.rjs = rjs;

//----------------------
// The Alarm hiphop code
//----------------------
function ICI () { console.log("ICI"); }

var ALARM =
    <rjs.reactivemachine debug name="ALARM">

   // Input / output interface
   //-------------------------

   // alarm time IOs
    
   <rjs.inputsignal name="TOGGLE_24H_MODE_COMMAND"/>
   <rjs.outputsignal name = "ALARM_TIME" init_value=${AD.InitialAlarmTime}/>

   // set-alarm IOs

   <rjs.inputsignal name = "ENTER_SET_ALARM_MODE_COMMAND"/>
   <rjs.inputsignal name = "SET_ALARM_TIME_COMMAND"/>
   <rjs.inputsignal name = "NEXT_ALARM_TIME_POSITION_COMMAND"/>
   <rjs.inputsignal name="EXIT_SET_ALARM_MODE_COMMAND"/>
   <rjs.outputsignal name= "START_ENHANCING" type="number"/>
   <rjs.outputsignal name= "STOP_ENHANCING" type="number"/>

   <rjs.inputsignal name="WATCH_TIME" init_value=${WD.InitialWatchTime}/>
   <rjs.inputsignal name="WATCH_BEING_SET"/>

   // Beep IOs

   <rjs.inputsignal name = "S"/> // to count beep duration
   <rjs.inputsignal name="TOGGLE_ALARM_COMMAND"/>
   <rjs.outputsignal name="ALARM_STATUS" type="boolean"/>
   <rjs.outputsignal name="BEEP" type="number"/>
   <rjs.inputsignal name="STOP_ALARM_BEEP_COMMAND"/> 

   // Reactive code
   //==============

   // initialisation
   <rjs.emit signal_name="ALARM_TIME" exprs=${AD.InitialAlarmTime}/>
   <rjs.emit signal_name="ALARM_STATUS" exprs=${false}/>
   
     // local signal to start the beeping seqence
    <rjs.localsignal name="START_BEEPING">
       <rjs.parallel>
          // loop between alarm mode and set-alarm mode
          <rjs.loop>
   
             // alarm mode

             <rjs.abort signal_name="ENTER_SET_ALARM_MODE_COMMAND">
                <rjs.parallel>

                   // react to alarm toggling command by toggling alarm status
                   <rjs.every signal_name="TOGGLE_ALARM_COMMAND">
                      <rjs.emit signal_name="ALARM_STATUS"
                                       func=${B.bnot}
                                       exprs=${rjs.preValue("ALARM_STATUS")}/>
                   </rjs.every>

                   // react to mode toggling command by toggling AlarmTime mode
                   <rjs.every signal_name="TOGGLE_24H_MODE_COMMAND">
                      <rjs.emit signal_name="ALARM_TIME"
                                    func=${AD.ToggleAlarmTimeMode}
                                   exprs=${rjs.preValue("ALARM_TIME")}/>
                   </rjs.every>

                   // react to watch time by testing whether beeping should start
                   <rjs.every signal_name="WATCH_TIME">
                      <rjs.present signal_name="WATCH_BEING_SET">
                         <rjs.nothing/>
                         <rjs.if func=${AD.CompareAlarmTimeToWatchTime}
                                exprs=${[rjs.value("ALARM_TIME"), rjs.value("WATCH_TIME")]}>
                            <rjs.emit signal_name="START_BEEPING"/>
                         </rjs.if>
                      </rjs.present>
                   </rjs.every>

                </rjs.parallel>
             </rjs.abort>

             // set-watch mode

             <rjs.abort signal_name="EXIT_SET_ALARM_MODE_COMMAND">
                // enhance initial position
                <rjs.emit signal_name="START_ENHANCING"
                                exprs=${AD.InitialAlarmTimePosition}/>
                <rjs.parallel>

                   // react to set-watch command bu updating position
                   <rjs.every signal_name="SET_ALARM_TIME_COMMAND">
                      <rjs.emit signal_name="ALARM_TIME" 
                                       func=${AD.IncrementAlarmTimeAtPosition}
                                      exprs=${[rjs.preValue("ALARM_TIME"),
                                               rjs.preValue("START_ENHANCING")]}/>
                   </rjs.every>

                   // react to next-position command by moving enhancement to the new position 
                   <rjs.every signal_name="NEXT_ALARM_TIME_POSITION_COMMAND">
                      <rjs.emit signal_name="STOP_ENHANCING"
                                      exprs=${rjs.preValue("START_ENHANCING")}/>
                      <rjs.emit signal_name="START_ENHANCING"
                                       func=${AD.NextAlarmTimePosition}
                                      exprs=${rjs.preValue("START_ENHANCING")}/>
                   </rjs.every>

                </rjs.parallel>
		</rjs.abort>
             <rjs.emit signal_name="STOP_ENHANCING"
                             exprs=${rjs.preValue("START_ENHANCING")}/>

          </rjs.loop>

          // Beeping sequence
          <rjs.every signal_name="START_BEEPING">
             // GB : SHOULD BE WEAK ABORT
             <rjs.trap trap_name="WAB">
                <rjs.parallel>
                   <rjs.sequence>
                      <rjs.await count=${BD.AlarmDurationMinusOne}
                                 signal_name="S"/>
                      <rjs.exit trap_name="WAB"/>
                   </sequence>
                   <rjs.loopeach signal_name="S">
                      <rjs.emit signal_name="BEEP"
                                exprs=${BD.NumberOfAlarmBeepsPerSecond}/>
                   </rjs.loopeach>
                 
                </rjs.parallel>
             </rjs.trap>
          </rjs.every>
       </rjs.parallel>
 
    </rjs.localsignal>

</rjs.reactivemachine>;
exports.ALARM = ALARM;

